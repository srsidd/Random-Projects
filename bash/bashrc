
# Increase bash history size
HISTSIZE=20000
HISTFILESIZE=40000
# Ignore duplicates, ls without options and builtin commands
HISTCONTROL=ignoredups
export HISTIGNORE="&:ls:[bf]g:exit"

# Terminal prompt 
GIT_PS1_SHOWDIRTYSTATE=1
PS1="\[\e[1;96m\]\W\[\e[92m\]@\h\[\e[1;91m\]\$(__git_ps1 '(%s)')\[\e[0;92m\] "

# Workspace sourcing
source /opt/ros/melodic/setup.bash
source /home/sidd/workspace/mril_ws/install/setup.bash

# catkin Aliases
alias cbt="catkin build --this --no-deps"
alias cbn="catkin build --no-deps"
alias cb="catkin build"
alias cc="catkin clean -y"
alias cr="catkin run_tests"

# Linux Aliases
alias ebrc="edit ~/.bashrc"  # Edit this .bashrc file
alias home="cd ~"            # go to home dir
alias cd..="cd .."
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias p="ps aux | grep "     # Search running processes
alias diff="colordiff"       # requires colordiff package
alias rebootsafe='sudo shutdown -r now'
alias rebootforce='sudo shutdown -r -n now'
alias enter_matrix='echo -e "\e[32m"; while :; do for i in {1..16}; do r="$(($RANDOM % 2))"; if [[ $(($RANDOM % 5)) == 1 ]]; then if [[ $(($RANDOM % 4)) == 1 ]]; then v+="\e[1m $r   "; else v+="\e[2m $r   "; fi; else v+="     "; fi; done; echo -e "$v"; v=""; done'

# This is GOLD for finding out what is taking so much space on your drives!
alias diskspace="du -S | sort -n -r |more"

# Git related
alias gs="git status"
alias gc="git commit"
alias ga="git add"
alias gd="git diff"
alias gb="git branch"
alias gl="git log"
alias gco="git checkout"

# Extracts any archive(s) (if unp isn't installed)
extract () {
        for archive in $*; do
                if [ -f $archive ] ; then
                        case $archive in
                                *.tar.bz2)   tar xvjf $archive    ;;
                                *.tar.gz)    tar xvzf $archive    ;;
                                *.bz2)       bunzip2 $archive     ;;
                                *.rar)       rar x $archive       ;;
                                *.gz)        gunzip $archive      ;;
                                *.tar)       tar xvf $archive     ;;
                                *.tbz2)      tar xvjf $archive    ;;
                                *.tgz)       tar xvzf $archive    ;;
                                *.zip)       unzip $archive       ;;
                                *.Z)         uncompress $archive  ;;
                                *.7z)        7z x $archive        ;;
                                *)           echo "don't know how to extract '$archive'..." ;;
                        esac
                else
                        echo "'$archive' is not a valid file!"
                fi
        done
}

# REMIND ME, ITS IMPORTANT!
# usage: remindme <time> <text>
# e.g.: remindme 10m "omg, the pizza"
remindme() {
  if [[ "$#" -lt 2 ]]; then
    echo -e "Usage: remindme [time] '[message]'"
    echo -e "Example: remindme 50s 'check mail'"
    echo -e "Example: remindme 10m 'go to class'"
    #exit 0 #not enough args
  fi
  if [[ "$#" -gt 2 ]]; then
    echo -e "Usage: remindme [time] '[message]'"
    echo -e "Example: remindme 50s 'check mail'"
    echo -e "Example: remindme 10m 'go to class'"
    #exit 0 #more than enough args
  fi
  if  [[ "$#" == 2 ]]; then
    sleep $1 && notify-send -t 15000 "$2" & echo 'Reminder set'
  fi
}

# SWAP 2 FILENAMES AROUND, IF THEY EXIST {{{
swap() {
  local TMPFILE=tmp.$$

  [[ $# -ne 2 ]] && echo "swap: 2 arguments needed" && return 1
  [[ ! -e $1 ]] && echo "swap: $1 does not exist" && return 1
  [[ ! -e $2 ]] && echo "swap: $2 does not exist" && return 1

  mv "$1" $TMPFILE
  mv "$2" "$1"
  mv $TMPFILE "$2"
}

# MKDIR AND CD INTO NEW DIR{{{
mkcd() {
  if [ $# != 1 ]; then
    echo "Usage: mkcd <dir>"
  else
    mkdir -p $1 && cd $1
  fi
}

